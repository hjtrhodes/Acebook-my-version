
const app = require("../app");
const debug = require("debug")("acebook:server");
const http = require("http");
const mongoose = require("mongoose");

if (!process.env.JWT_SECRET) {
  console.error("\nThe JWT_SECRET environment variable wasn't set before running the server. Did you forget it?\n\n");
  process.exit();            
}

let password;

try {
  // Try to use local config
  const localConfig = require('../config');
  password = localConfig.password;
} catch (error) {
  // If local config is not available, use environment variable
  password = process.env.DB_PASSWORD;
}

/**
 * Connect to MongoDB
 **/
mongoose.connect(`mongodb+srv://hjtrhodes:${password}@acebook.68ebyeu.mongodb.net/acebook?retryWrites=true&w=majority`, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})

  .then(() => { // call the then method, which adds a callback function to the promise, to handle the success case
    console.log('Successfully connected to MongoDB Atlas!'); // log a message to the console
  })
  .catch((error) => { // call the catch method, which adds a callback function to the promise, to handle the failure case
    console.log('Unable to connect to MongoDB Atlas!', error.message); // log a message to the console
    console.error(error); // log the error to the console
  });
  

var db = mongoose.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:"));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Now listening on " + bind);
  debug("Listening on " + bind);
}

